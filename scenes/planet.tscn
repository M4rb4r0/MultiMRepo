[gd_scene load_steps=8 format=3 uid="uid://dqxus3thqimav"]

[ext_resource type="Texture2D" uid="uid://c6xfnmqsvhdfy" path="res://assets/planets/earth.png" id="1_h8ms6"]
[ext_resource type="Texture2D" uid="uid://6lehvlocbvti" path="res://assets/planets/22152631.png" id="2_0k1rn"]
[ext_resource type="Texture2D" uid="uid://g8pvexalmse" path="res://assets/Bubbles/Atmosphere.png" id="2_h8ms6"]
[ext_resource type="Texture2D" uid="uid://b4knpnwvtukg5" path="res://assets/planets/22152632.png" id="3_48b8c"]

[sub_resource type="GDScript" id="GDScript_cktii"]
script/source = "extends StaticBody2D

@export var health := 3
@export var respawnable := false  # NUEVO: permite respawn
var alive := true
@onready var sprite_base: Sprite2D = $Sprite2D
@onready var crack1: Sprite2D = $Sprite2D2
@onready var crack2: Sprite2D = $Sprite2D3
@onready var body_collision: CollisionShape2D = $CollisionShape2D
@onready var area_collision: CollisionShape2D = $Area2D/CollisionShape2D
var sprite_index := -1  
var planet_sprite_paths := [
	\"res://assets/planets/earth.png\",
	\"res://assets/planets/2275770583.png\",
]
func _ready():
	if self.get_multiplayer_authority() == 1:
		if sprite_index == -1:
			sprite_index = randi_range(0, planet_sprite_paths.size() - 1)
		set_planet_sprite.rpc(sprite_index)

@rpc(\"authority\", \"call_local\")
func set_planet_sprite(index: int):
	if index >= 0 and index < planet_sprite_paths.size():
		var texture = load(planet_sprite_paths[index])
		if texture is Texture2D:
			sprite_base.texture = texture
		else:
			push_warning(\"No se pudo cargar la textura en: \" + planet_sprite_paths[index])
	else:
		push_warning(\"Índice fuera de rango: \" + str(index))

@rpc(\"authority\", \"call_local\", \"reliable\")
func recieve_damage():
	if not alive:
		return

	print(\"planeta recibió daño desde health: \" + str(health))
	vibrate_planet()
	health -= 1

	if health == 2:
		fade_in_crack1(crack1)
	elif health == 1:
		fade_in_crack2(crack2)
	elif health <= 0:
		explode()
func explode():
	alive = false
	send_data.rpc(alive)

	if respawnable:
		hide()
		set_collision_enabled(false)
		await get_tree().create_timer(5.0).timeout
		respawn()
	else:
		queue_free()

func respawn():
	health = 3
	alive = true
	send_data.rpc(alive)

	crack1.visible = false
	crack2.visible = false
	crack1.modulate.a = 0.0
	crack2.modulate.a = 0.0

	show()
	set_collision_enabled(true)

func set_collision_enabled(enabled: bool):
	body_collision.set_deferred(\"disabled\", not enabled)
	area_collision.set_deferred(\"disabled\", not enabled)
	
@rpc(\"authority\")
func send_data(state: bool) -> void:
	alive = state

func fade_in_crack1(crack_node: Sprite2D):
	crack_node.visible = true
	crack_node.modulate.a = 0.0
	var tween = get_tree().create_tween()
	tween.tween_property(crack_node, \"modulate:a\", 0.5, 0.2)

func fade_in_crack2(crack_node: Sprite2D):
	crack_node.visible = true
	crack_node.modulate.a = 0.0
	var tween = get_tree().create_tween()
	tween.tween_property(crack_node, \"modulate:a\", 0.4, 0.2)

func vibrate_planet():
	var tween = get_tree().create_tween()
	var original_pos = position
	var intensity = 8
	var speed = 0.05

	tween.tween_property(self, \"position\", original_pos + Vector2(-intensity, 0), speed)
	tween.tween_property(self, \"position\", original_pos + Vector2(intensity, 0), speed)
	tween.tween_property(self, \"position\", original_pos + Vector2(0, -intensity), speed)
	tween.tween_property(self, \"position\", original_pos + Vector2(0, intensity), speed)
	tween.tween_property(self, \"position\", original_pos, speed)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_0k1rn"]
radius = 102.0

[sub_resource type="CircleShape2D" id="CircleShape2D_48b8c"]
radius = 245.615

[node name="Planet" type="StaticBody2D" groups=["Damageable"]]
scale = Vector2(2, 2)
collision_layer = 3
collision_mask = 3
script = SubResource("GDScript_cktii")

[node name="Sprite2D" type="Sprite2D" parent="."]
show_behind_parent = true
scale = Vector2(2, 2)
texture = ExtResource("1_h8ms6")

[node name="Sprite2D2" type="Sprite2D" parent="."]
visible = false
modulate = Color(1, 1, 1, 0.521569)
texture_filter = 1
position = Vector2(-5.5, -2.38419e-07)
rotation = 0.313608
scale = Vector2(0.345163, 0.345163)
texture = ExtResource("2_0k1rn")

[node name="Sprite2D3" type="Sprite2D" parent="."]
visible = false
modulate = Color(1, 1, 1, 0.827451)
position = Vector2(1.5, 3.5)
scale = Vector2(0.339635, 0.339635)
texture = ExtResource("3_48b8c")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_0k1rn")
one_way_collision_margin = 0.0
debug_color = Color(0.97, 0.1261, 0.280815, 0.0666667)

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 7
collision_mask = 7
gravity_space_override = 3
gravity_point = true
gravity_point_center = Vector2(0, 0)
gravity_direction = Vector2(0, 0)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("CircleShape2D_48b8c")
debug_color = Color(0.85, 0.3485, 0.407008, 0.0901961)

[node name="Atmosphere" type="Sprite2D" parent="."]
self_modulate = Color(1, 1, 1, 0.270588)
position = Vector2(7, 12.5)
scale = Vector2(13.9565, 13.0763)
texture = ExtResource("2_h8ms6")
